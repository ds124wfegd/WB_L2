package main

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil // err является nil-указателем на os.PathError
	return err                  //возвращается интерфейс error, переменная err имеет тип *os.PathError и значение nil
	//Динамический тип = *os.PathError (не nil!)
	//Динамическое значение = nil
}

func main() {
	err := Foo()
	fmt.Println(err)        // вывод: nil
	fmt.Println(err == nil) // вывод: false
}

/*
Внутреннее устройство интерфейсов в Go

Интерфейс в Go состоит из двух компонентов:

Динамический тип (concrete type) — тип значения, которое хранится в интерфейсе.

Динамическое значение (concrete value) — само значение, которое хранится в интерфейсе.

Интерфейс равен nil только если оба компонента (тип и значение) равны nil.
*/

/* Пустые интерфейсы (interface{})
Пустой интерфейс не требует каких-либо методов и может хранить значение любого типа.

Внутренне устроен так же: содержит динамический тип и динамическое значение.

Аналогично, пустой интерфейс будет равен nil только если оба компонента нулевые.
*/
